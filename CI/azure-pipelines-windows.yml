pr:
  - master
  - main
  - multiple-framework-croprectangle


pool:
  vmImage: 'windows-latest'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- checkout: self
  displayName: Checkout IronSoftware.Drawing git repository
  lfs: true

- task: UseDotNet@2
  displayName: "Install .NET Core"
  inputs:
    packageType: 'sdk'
    version: '5.x'

- task: NuGetToolInstaller@1
  displayName: Install NuGet Manager
  inputs:
    versionSpec:
    checkLatest: true

- task: DotNetCoreCLI@2
  displayName: 'Restore Solution NuGet Packages'
  enabled: true
  continueOnError: true
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.sln'
    verbosityRestore: 'Normal'
    feedsToUse: 'config'
    nugetConfigPath: '$(Build.SourcesDirectory)/IronSoftware.Drawing/nuget.config'

- task: DotNetCoreCLI@2
  displayName: Build IronBarCode Solution
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.sln'
    arguments: '--configuration $(buildConfiguration) --no-restore --verbosity normal'

- task: DotNetCoreCLI@2
  displayName: (Framework)Execute Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "net472" --verbosity n --no-build'
    testRunTitle: '(Framework)Execute Unit Tests'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: (Core)Execute Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "net50" --verbosity n --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
    testRunTitle: '(Core)Execute Unit Tests'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: (Core)Execute Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "net60" --verbosity n --no-build'
    testRunTitle: '(Core)Execute Unit Tests'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: (Core)Execute Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "net70" --verbosity n --no-build'
    testRunTitle: '(Core)Execute Unit Tests'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: (Core)Execute Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "netcoreapp2.1" --verbosity n --no-build'
    testRunTitle: '(Core)Execute Unit Tests'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: (Core)Execute Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "netcoreapp3.1" --verbosity n'
    testRunTitle: '(Core)Execute Unit Tests'
  condition: succeededOrFailed()

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
  
- task: PublishTestResults@2
  displayName: 'Publish test result'
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
