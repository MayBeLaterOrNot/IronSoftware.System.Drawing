##### DECLARATIONS #####
# Variables
parameters:
  - name: githubRelease
    displayName: GitHub Release
    type: boolean
    default: True
variables:
  - group: IronDrawingVersions
  - name: Configuration
    value: 'Release'
  - name: AssemblyVersion
    value: $(IronDrawingMajorVersion).$(IronDrawingMinorVersion).$(IronDrawingRevisionVersion).$(IronDrawingPatch)
  - name: NuGetVersion
    value: $(IronDrawingMajorVersion).$(IronDrawingMinorVersion).$(IronDrawingPatch)
    
# Virtual Machine
pool:
  vmImage: 'windows-latest'
##### STEPS #####
stages:
## Compile
- stage: BuildDrawingLibraries
  displayName: Build IronSoftware.Drawing Libraries
  dependsOn: []
  jobs:
    - job: BuildDrawingLibraries
      steps:
      # Checkout Repo
      - checkout: self
        displayName: Checkout IronSoftware.Drawing repository
        lfs: true
      - task: UseDotNet@2
        displayName: 'Install .NET7.0 sdk'
        inputs:
          packageType: 'sdk'
          version: '7.x'
      # Build
      - task: DotNetCoreCLI@2
        displayName: Restore Solution NuGet Packages
        enabled: true
        continueOnError: true
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.sln'
          verbosityRestore: Minimal
          feedsToUse: 'config'
          nugetConfigPath: '$(Build.SourcesDirectory)/IronSoftware.Drawing/nuget.config'
      - task: DotNetCoreCLI@2
        displayName: Build Drawing Libraries Solution
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.sln'
          arguments: '--configuration $(Configuration) --no-restore --verbosity normal'
          versioningScheme: byEnvVar
          versionEnvVar: AssemblyVersion
      # Publish Pipeline Artifacts
      - task: CopyFiles@2
        displayName: 'Copy tests.runsettings file'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests'
          Contents: 'tests*.runsettings'
          TargetFolder: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/bin/$(Configuration)'
      - task: PublishPipelineArtifact@1
        displayName: Publish IronDrawing Test Data
        inputs:
          targetPath: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/Data'
          artifact: 'IronDrawingDataTests'
          publishLocation: 'pipeline'
      - task: PublishPipelineArtifact@1
        displayName: Publish IronDrawing Test Assemblies
        inputs:
          targetPath: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/bin/$(Configuration)'
          artifact: 'IronDrawingTests'
          publishLocation: 'pipeline'
      - task: PublishPipelineArtifact@1
        displayName: Publish IronDrawing Assemblies
        inputs:
          targetPath: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common/bin/$(Configuration)'
          artifact: 'IronDrawingAssemblies'
          publishLocation: 'pipeline'
      - task: PublishPipelineArtifact@1
        displayName: Publish IronDrawing NuGet Files
        inputs:
          targetPath: 'NuGet'
          artifact: 'IronDrawingNuGet'
          publishLocation: 'pipeline'
## Test Windows
- stage: WindowsTests
  pool:
    vmImage: 'windows-latest'
  displayName: Execute Windows Tests
  dependsOn: BuildDrawingLibraries
  jobs:
  # Windows .NET Core x64 Tests
  - job: WindowsNetCoreX64Tests
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingTests'
        targetPath: 'IronDrawingTests'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingDataTests'
        targetPath: '$(Agent.BuildDirectory)/Data'
    - task: UseDotNet@2
      displayName: 'Install .Netcoreapp3.1 Core sdk'
      inputs:
        packageType: 'sdk'
        version: '3.x'
    - task: DotNetCoreCLI@2
      displayName: Execute Windows (.NET Core x64) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/netcoreapp3.1/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.runsettings --framework "netcoreapp3.1" -v d --blame --diag:"$(Agent.BuildDirectory)\IronDrawingTests\bin\$(Configuration)\netcoreapp3.1\testhost.log"'
        testRunTitle: 'Windows (.NET Core) Tests'
        publishTestResults: true
    # Upload Log files
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Agent.BuildDirectory)\IronDrawingTests\bin\$(Configuration)\netcoreapp3.1\testhost.log'
        artifact: 'IronDrawing testhost Windows netcoreapp3.1 x64 log'
        publishLocation: 'pipeline'
      condition: always()
  # Windows .NET Core x86 Tests
  - job: WindowsNetCoreX86Tests
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingTests'
        targetPath: 'IronDrawingTests'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingDataTests'
        targetPath: '$(Agent.BuildDirectory)/Data'
    - task: UseDotNet@2
      displayName: 'Install .Netcoreapp3.1 Core sdk'
      inputs:
        packageType: 'sdk'
        version: '3.x'
    - task: DotNetCoreCLI@2
      displayName: Execute Windows (.NET Core x86) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/netcoreapp3.1/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.x86.runsettings --framework "netcoreapp3.1" -v d --blame --diag:"$(Agent.BuildDirectory)\IronDrawingTests\bin\$(Configuration)\netcoreapp3.1\testhost.log"'
        testRunTitle: 'Windows (.NET Core) Tests'
        publishTestResults: true
    # Upload Log files
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Agent.BuildDirectory)\IronDrawingTests\bin\$(Configuration)\netcoreapp3.1\testhost.log'
        artifact: 'IronDrawing testhost Windows netcoreapp3.1 x86 log'
        publishLocation: 'pipeline'
      condition: always()
  # Windows .NET 6.0 Tests
  - job: WindowsNet60Tests
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingTests'
        targetPath: 'IronDrawingTests'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingDataTests'
        targetPath: '$(Agent.BuildDirectory)/Data'
    - task: DotNetCoreCLI@2
      displayName: Execute Windows (.NET 6.0 x64) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/net60/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.runsettings --framework "net60" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)\IronDrawingTests\bin\$(Configuration)\net60\testhost.log"'
        testRunTitle: 'Windows (.NET 6.0) Tests'
        publishTestResults: true
    # Upload Log files
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Agent.BuildDirectory)\IronDrawingTests\bin\$(Configuration)\net60\testhost.log'
        artifact: 'IronDrawing testhost Windows net60 log'
        publishLocation: 'pipeline'
      condition: always()
  # Windows .NET 7.0 Tests
  - job: WindowsNet70Tests
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingTests'
        targetPath: 'IronDrawingTests'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingDataTests'
        targetPath: '$(Agent.BuildDirectory)/Data'
    - task: DotNetCoreCLI@2
      displayName: Execute Windows (.NET 7.0 x64) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/net70/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.runsettings --framework "net70" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)\IronDrawingTests\bin\$(Configuration)\net70\testhost.log"'
        testRunTitle: 'Windows (.NET 7.0) Tests'
        publishTestResults: true
    # Upload Log files
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Agent.BuildDirectory)\IronDrawingTests\bin\$(Configuration)\net70\testhost.log'
        artifact: 'IronDrawing testhost Windows net70 log'
        publishLocation: 'pipeline'
      condition: always()
## Test Linux
- stage: LinuxTests
  pool:
    vmImage: 'ubuntu-latest'
  displayName: Execute Linux Tests
  dependsOn: BuildDrawingLibraries
  jobs:
  - job: LinuxNetCoreTests
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingTests'
        targetPath: 'IronDrawingTests'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingDataTests'
        targetPath: '$(Agent.BuildDirectory)/Data'
    - task: UseDotNet@2
      displayName: 'Install .Netcoreapp3.1 Core sdk'
      inputs:
        packageType: 'sdk'
        version: '3.x'
    - task: DotNetCoreCLI@2
      displayName: Execute Linux (.NET Core) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/netcoreapp3.1/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.runsettings --framework "netcoreapp3.1" -v d --diag:"$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)/netcoreapp3.1/testhost.log"'
        testRunTitle: 'Linux (.NET Core) Tests'
        publishTestResults: true
    # Upload Log files
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)/netcoreapp3.1/testhost.log'
        artifact: 'IronDrawing testhost Ubuntu netcoreapp3.1 log'
        publishLocation: 'pipeline'
      condition: always()
  - job: LinuxNet60Tests
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingTests'
        targetPath: 'IronDrawingTests'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingDataTests'
        targetPath: '$(Agent.BuildDirectory)/Data'
    - task: DotNetCoreCLI@2
      displayName: Execute Linux (.NET 6.0) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/net60/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.runsettings --framework "net60" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)/net60/testhost.log"'
        testRunTitle: 'Linux (.NET 6.0) Tests'
        publishTestResults: true
    # Upload Log files
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)/net60/testhost.log'
        artifact: 'IronDrawing testhost Ubuntu net60 log'
        publishLocation: 'pipeline'
      condition: always()
  - job: LinuxNet70Tests
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingTests'
        targetPath: 'IronDrawingTests'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingDataTests'
        targetPath: '$(Agent.BuildDirectory)/Data'
    - task: DotNetCoreCLI@2
      displayName: Execute Linux (.NET 7.0) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/net70/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.runsettings --framework "net70" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)/net70/testhost.log"'
        testRunTitle: 'Linux (.NET 6.0) Tests'
        publishTestResults: true
    # Upload Log files
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)/net70/testhost.log'
        artifact: 'IronDrawing testhost Ubuntu net70 log'
        publishLocation: 'pipeline'
      condition: always()
## Test MacOs
- stage: MacOsTests
  pool:
    vmImage: 'macOS-latest'
  displayName: Execute MacOs Tests
  dependsOn: BuildDrawingLibraries
  jobs:
  - job: MacOsTests
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingTests'
        targetPath: 'IronDrawingTests'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingDataTests'
        targetPath: '$(Agent.BuildDirectory)/Data'
    - task: DotNetCoreCLI@2
      displayName: Execute MacOs (.NET Core) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/netcoreapp3.1/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.runsettings --framework "netcoreapp3.1" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)/netcoreapp3.1/testhost.log"'
        testRunTitle: 'MacOs (.NET Core) Tests'
        publishTestResults: true
    - task: DotNetCoreCLI@2
      displayName: Execute MacOs (.NET 6.0) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/net60/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.runsettings --framework "net60" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)/net60/testhost.log"'
        testRunTitle: 'MacOs (.NET 6.0) Tests'
        publishTestResults: true
    - task: DotNetCoreCLI@2
      displayName: Execute MacOs (.NET 7.0) Tests
      inputs:
        command: 'test'
        projects: 'IronDrawingTests/net60/IronSoftware.Drawing.Common.Tests.dll'
        arguments: '-s IronDrawingTests/tests.runsettings --framework "net70" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)/net70/testhost.log"'
        testRunTitle: 'MacOs (.NET 7.0) Tests'
        publishTestResults: true
    # Upload Log files
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Agent.BuildDirectory)/IronDrawingTests/bin/$(Configuration)'
        artifact: 'IronDrawing testhost MacOS log'
        publishLocation: 'pipeline'
      condition: always()
## Push NuGet Package
- stage: DeployDrawingLibraries
  pool:
    vmImage: 'windows-latest'
  displayName: Deploy NuGet Package
  dependsOn:
    - WindowsTests
    - LinuxTests
    - MacOsTests
  jobs:
  - job: DeployDrawingLibraries
    steps:
    - checkout: none
    - task: DownloadSecureFile@1
      displayName: Download IronBarCode Code-Signing Cert
      name: DownloadSigningCert
      inputs:
        secureFile: 'ironcert.pfx'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingAssemblies'
        targetPath: 'bin/$(Configuration)'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'IronDrawingNuGet'
        targetPath: 'NuGet'
    - task: CmdLine@2
      displayName: 'Sign IronSoftware.Drawing.Common.dll .NET Standard'
      inputs:
          workingDirectory: 'bin\$(Configuration)\netstandard2.0'
          script: '$(Build.SourcesDirectory)\NuGet\signtool.exe sign /v /d IronDrawing /f $(Agent.TempDirectory)/ironcert.pfx /p $(CertificatePassword) /t http://timestamp.digicert.com /fd SHA256 "IronSoftware.Drawing.Common.dll"'
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 6.2.1
    - task: NuGetCommand@2
      displayName: 'Build DrawingLibraries NuGet Package'
      inputs:
        command: 'pack'
        packagesToPack: 'NuGet\IronSoftware.Drawing.nuspec'
        configuration: $(Configuration)
        buildProperties: 'version=$(NuGetVersion);commit=$(Build.SourceVersion);IncludeSymbols=true;SymbolPackageFormat=snupkg'
        includeSymbols: true
    # Sign NuGet Packages
    - task: NuGetCommand@2
      displayName: Sign IronDrawing NuGet Package
      inputs:
        command: 'custom'
        arguments: 'sign $(Build.ArtifactStagingDirectory)\IronSoftware.System.Drawing.$(NuGetVersion).symbols.nupkg -CertificatePath $(Agent.TempDirectory)\ironcert.pfx -Timestamper http://timestamp.digicert.com -NonInteractive -CertificatePassword $(CertificatePassword)'
    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'ac7dfa01-e357-472b-9830-d5cd55e71bdd/5aac0020-09d2-4b2e-a77e-47f173a1ffd6'
        includeSymbols: true
    - task: PublishSymbols@2
      inputs:
        SearchPattern: '**/*.pdb'
        indexSources: true
        publishSymbols: true
        symbolServerType: TeamServices
        detailedLog: true
    # Store Version Information
    - task: file-creator@6
      displayName: Store Version Information
      inputs:
        filepath: 'VersionInformation/versions.xml'
        filecontent: |
          <?xml version="1.0" encoding="utf-8"?>
          <Versions>
          <Configuration>$(Configuration)</Configuration>
          <IronDrawingNuGetVersion>$(NuGetVersion)</IronDrawingNuGetVersion>
          <IronDrawingAssemblyVersion>$(AssemblyVersion)</IronDrawingAssemblyVersion>
          <GitCommitHash>$(Build.SourceVersion)</GitCommitHash>
          </Versions>
        fileoverwrite: true
        verbose: true
    - task: PublishBuildArtifacts@1
      displayName: Publish IronDrawing Version Information
      inputs:
        PathtoPublish: 'VersionInformation'
        ArtifactName: 'IronDrawingVersions'
        publishLocation: 'Container'
    - task: GitHubRelease@1
      condition: and(succeeded(), eq('${{ parameters.githubRelease }}', true))
      inputs:
        isPreRelease: true
        gitHubConnection: 'ironsoftwarebuild'
        repositoryName: 'iron-software/IronSoftware.System.Drawing'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: '$(NuGetVersion)'
        title: 'IronSoftware.System.Drawing v$(NuGetVersion)'
        releaseNotesSource: 'inline'
        # Uncomment when create zip package
        # assets: '$(Build.ArtifactStagingDirectory)/*.zip'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
