trigger:
  branches:
    include:
    - main
    - master
  paths:
    exclude:
    - NuGet
pr:
  branches:
    include:
    - master
    - main
  paths:
    exclude:
    - NuGet


pool:
  name: SelfHosted
  demands: PlatformArchitecture -equals MacArm64

variables:
  - group: IronDrawingVersions
  - name: buildConfiguration
    value: 'Debug'
  - name: AssemblyVersion
    value: $(IronDrawingMajorVersion).$(IronDrawingMinorVersion).$(IronDrawingRevisionVersion).$(Build.BuildID)

steps:
- bash: 'brew update && brew install mono-libgdiplus'
  displayName: Install GdiPlus

- checkout: self
  displayName: Checkout IronSoftware.Drawing git repository
  lfs: true

- task: UseDotNet@2
  displayName: 'Install .Netcoreapp2.1 Core sdk'
  inputs:
    packageType: 'sdk'
    version: '2.x'
- task: UseDotNet@2
  displayName: 'Install .Netcoreapp3.1 Core sdk'
  inputs:
    packageType: 'sdk'
    version: '3.x'
- task: UseDotNet@2
  displayName: 'Install .Net50 Core sdk'
  inputs:
    packageType: 'sdk'
    version: '5.x'
- task: UseDotNet@2
  displayName: 'Install .Net60 Core sdk'
  inputs:
    packageType: 'sdk'
    version: '6.x'
- task: UseDotNet@2
  displayName: 'Install .Net70 Core sdk'
  inputs:
    packageType: 'sdk'
    version: '7.x'
    includePreviewVersions: true

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet Manager'
  inputs:
    versionSpec:
    checkLatest: true

- task: DotNetCoreCLI@2
  displayName: 'Restore Solution NuGet Packages'
  enabled: true
  continueOnError: true
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.sln'
    verbosityRestore: 'Normal'
    feedsToUse: 'config'
    nugetConfigPath: '$(Build.SourcesDirectory)/IronSoftware.Drawing/nuget.config'

- task: DotNetCoreCLI@2
  displayName: Build Solution
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.sln'
    arguments: '--configuration $(buildConfiguration) --no-restore --verbosity normal'
    versioningScheme: byEnvVar
    versionEnvVar: AssemblyVersion

- task: DotNetCoreCLI@2
  displayName: Execute .Net70 Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "net70" --verbosity n --no-build'
    testRunTitle: 'Execute Unit Tests'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  name: UnitTestsNet50
  displayName: Execute .Net50 Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "net50" --verbosity n --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
    testRunTitle: 'Execute Unit Tests'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: Execute .Net60 Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "net60" --verbosity n --no-build'
    testRunTitle: 'Execute Unit Tests'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: Execute .Netcoreapp2.1 Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "netcoreapp2.1" --verbosity n --no-build'
    testRunTitle: 'Execute Unit Tests'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: Execute .Netcoreapp3.1 Unit Tests
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/IronSoftware.Drawing.Common.Tests.csproj'
    arguments: '--configuration "$(buildConfiguration)" -f "netcoreapp3.1" --verbosity n --no-build'
    testRunTitle: 'Execute Unit Tests'
  condition: succeededOrFailed()

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
  condition: succeededOrFailed()
  
- task: PublishTestResults@2
  displayName: 'Publish test result'
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
  condition: succeededOrFailed()
