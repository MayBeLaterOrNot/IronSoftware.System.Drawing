trigger:
  branches:
    include:
    - main
    - master
  paths:
    exclude:
    - NuGet
pr:
  branches:
    include:
    - master
    - main
  paths:
    exclude:
    - NuGet


pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: IronDrawingVersions
  - name: buildConfiguration
    value: 'Debug'
  - name: AssemblyVersion
    value: $(IronDrawingMajorVersion).$(IronDrawingMinorVersion).$(IronDrawingRevisionVersion).$(Build.BuildID)

##### STEPS #####
stages:
## Restore & Build IronDrawing and Publish Artifact
- stage: BuildDrawingLibraries
  displayName: Build IronSoftware.Drawing Libraries
  dependsOn: []
  jobs:
    - job: BuildDrawingLibraries
      steps:
      - checkout: self
        displayName: Checkout IronSoftware.Drawing git repository
        lfs: true
      - task: UseDotNet@2
        displayName: 'Install .Netcoreapp3.1 Core sdk'
        inputs:
          packageType: 'sdk'
          version: '3.x'
      - task: UseDotNet@2
        displayName: 'Install .Net60 sdk'
        inputs:
          packageType: 'sdk'
          version: '6.x'
      - task: UseDotNet@2
        displayName: 'Install .Net70 sdk'
        inputs:
          packageType: 'sdk'
          version: '7.x'
      - task: NuGetToolInstaller@1
        displayName: Install NuGet Manager
        inputs:
          versionSpec:
          checkLatest: true
      - task: DotNetCoreCLI@2
        displayName: 'Restore Solution NuGet Packages'
        enabled: true
        continueOnError: true
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.sln'
          verbosityRestore: 'Normal'
          feedsToUse: 'config'
          nugetConfigPath: '$(Build.SourcesDirectory)/IronSoftware.Drawing/nuget.config'
      - task: DotNetCoreCLI@2
        displayName: Build Solution
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.sln'
          arguments: '--configuration $(buildConfiguration) --no-restore --verbosity normal'
          versioningScheme: byEnvVar
          versionEnvVar: AssemblyVersion
      - task: CopyFiles@2
        displayName: 'Copy tests.runsettings file'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests'
          Contents: 'tests*.runsettings'
          TargetFolder: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/bin/$(buildConfiguration)'
      - task: PublishPipelineArtifact@1
        displayName: Publish IronDrawing Test Data
        inputs:
          targetPath: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/Data'
          artifact: 'IronDrawingDataTests'
          publishLocation: 'pipeline'
      - task: PublishPipelineArtifact@1
        displayName: Publish IronDrawing Test Assemblies
        inputs:
          targetPath: '$(Build.SourcesDirectory)/IronSoftware.Drawing/IronSoftware.Drawing.Common.Tests/bin/$(buildConfiguration)'
          artifact: 'IronDrawingTests'
          publishLocation: 'pipeline'
## Execute Unit Tests
- stage: ExecuteUnitTests
  displayName: Execute Unit Tests
  dependsOn: [BuildDrawingLibraries]
  jobs:
    # Execute NET70 Unit Tests
    - job: UnitTestNET70
      steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'IronDrawingTests'
          targetPath: 'IronDrawingTests'
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'IronDrawingDataTests'
          targetPath: '$(Agent.BuildDirectory)/Data'
      - task: DotNetCoreCLI@2
        displayName: Execute .Net70 Unit Tests
        inputs:
          command: 'test'
          projects: 'IronDrawingTests/net70/IronSoftware.Drawing.Common.Tests.dll'
          arguments: '-s IronDrawingTests/tests.runsettings --framework "net70" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)\IronDrawingTests\net70\testhost.log"'
          testRunTitle: 'Execute Unit Tests'
        condition: succeededOrFailed()
    # Execute NET60 Unit Tests
    - job: UnitTestNet60
      steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'IronDrawingTests'
          targetPath: 'IronDrawingTests'
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'IronDrawingDataTests'
          targetPath: '$(Agent.BuildDirectory)/Data'
      - task: DotNetCoreCLI@2
        displayName: Execute .Net60 Unit Tests
        inputs:
          command: 'test'
          projects: 'IronDrawingTests/net60/IronSoftware.Drawing.Common.Tests.dll'
          arguments: '-s IronDrawingTests/tests.runsettings --framework "net60" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)\IronDrawingTests\net60\testhost.log" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
          testRunTitle: 'Execute Unit Tests'
        condition: succeededOrFailed()
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        condition: succeededOrFailed()
    # Execute NET Core 3.1 Unit Tests
    - job: UnitTestNetCore
      steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'IronDrawingTests'
          targetPath: 'IronDrawingTests'
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'IronDrawingDataTests'
          targetPath: '$(Agent.BuildDirectory)/Data'
      - task: DotNetCoreCLI@2
        displayName: Execute .Netcoreapp3.1 Unit Tests
        inputs:
          command: 'test'
          projects: 'IronDrawingTests/netcoreapp3.1/IronSoftware.Drawing.Common.Tests.dll'
          arguments: '-s IronDrawingTests/tests.runsettings --framework "netcoreapp3.1" -v d --blame --blame-hang --blame-crash --blame-hang-timeout 7m --diag:"$(Agent.BuildDirectory)\IronDrawingTests\netcoreapp3.1\testhost.log"'
          testRunTitle: 'Execute Unit Tests'
        condition: succeededOrFailed()
